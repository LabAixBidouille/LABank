package org.fablab.labank.dto;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.util.List;

/**
 * Created by Kandel HANAFI on 29/03/2017.
 */
@Entity
@Table(name="Project")
public class ProjectDTO {

    // ------------------------
    // PRIVATE FIELDS
    // ------------------------

    // An autogenerated id (unique for each user in the db)
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "idproject")
    private Long idProject;

    // The project's name
    @NotNull
    private String name;

    // The project's illustration (URL of the image)
    private String illustration;

    // The id of project's licence
    @NotNull
    @Column(name = "idlicence")
    private Long idLicence;

    // The project's tags
    private String tags;

    // Boolean that indicates if the project has to be published
    @NotNull
    private boolean publish;

    // List of collaborators
    @OneToMany
    @JoinTable
            (
                    name="collaborators",
                    joinColumns={ @JoinColumn(name="idproject", referencedColumnName="idproject") },
                    inverseJoinColumns={ @JoinColumn(name="iduser", referencedColumnName="id", unique=true) }
            )
    // While Update this will also insert collection row another insert
    private List<UserDTO> collaborators;

    // List of materials
    @OneToMany
    @JoinTable
            (
                    name="employed_materials",
                    joinColumns={ @JoinColumn(name="idproject", referencedColumnName="idproject") },
                    inverseJoinColumns={ @JoinColumn(name="idmaterial", referencedColumnName="idmaterial", unique=true) }
            )
    // While Update this will also insert collection row another insert
    private List<MaterialDTO> projectsMaterials;

    // List of themes
    @OneToMany
    @JoinTable
            (
                    name="project_has_theme",
                    joinColumns={ @JoinColumn(name="idproject", referencedColumnName="idproject") },
                    inverseJoinColumns={ @JoinColumn(name="idtheme", referencedColumnName="idtheme", unique=true) }
            )
    // While Update this will also insert collection row another insert
    private List<ThemeDTO> projectsThemes;

    // List of machines
    @OneToMany
    @JoinTable
            (
                    name="employed_machines",
                    joinColumns={ @JoinColumn(name="idproject", referencedColumnName="idproject") },
                    inverseJoinColumns={ @JoinColumn(name="idmachine", referencedColumnName="id", unique=true) }
            )
    // While Update this will also insert collection row another insert
    private List<MachineDTO> projectsdMachines;

    // List of files
    @OneToMany
    @JoinTable
            (
                    name="projectfile ",
                    joinColumns={ @JoinColumn(name="idproject", referencedColumnName="idproject") },
                    inverseJoinColumns={ @JoinColumn(name="idprojectfile", referencedColumnName="idprojectfile", unique=true) }
            )
    // While Update this will also insert collection row another insert
    private List<ProjectFileDTO> projectsFiles;



    // ------------------------
    // PUBLIC METHODS
    // ------------------------

    ProjectDTO(){}

    ProjectDTO(Long idProject){this.idProject = idProject;}

    ProjectDTO(ProjectDTO project){
        this.idProject = project.idProject;
        this.name = project.name;
        this.illustration = project.illustration;
        this.idLicence = project.idLicence;
        this.tags = project.tags;
        this.publish = project.publish;
    }

    public Long getIdProject() {
        return idProject;
    }

    public void setIdProject(Long idProject) {
        this.idProject = idProject;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getIllustration() {
        return illustration;
    }

    public void setIllustration(String illustration) {
        this.illustration = illustration;
    }

    public Long getIdLicence() {
        return idLicence;
    }

    public void setIdLicence(Long idLicence) {
        this.idLicence = idLicence;
    }

    public String getTags() {
        return tags;
    }

    public void setTags(String tags) {
        this.tags = tags;
    }

    public boolean isPublish() {
        return publish;
    }

    public void setPublish(boolean publish) {
        this.publish = publish;
    }

    public List<UserDTO> getCollaborators() {
        return collaborators;
    }

    public void setCollaborators(List<UserDTO> collaborators) {
        this.collaborators = collaborators;
    }

    public List<MaterialDTO> getProjectsMaterials() {
        return projectsMaterials;
    }

    public void setProjectsMaterials(List<MaterialDTO> projectsMaterials) {
        this.projectsMaterials = projectsMaterials;
    }

    public List<ThemeDTO> getProjectsThemes() {
        return projectsThemes;
    }

    public void setProjectsThemes(List<ThemeDTO> projectsThemes) {
        this.projectsThemes = projectsThemes;
    }

    public List<MachineDTO> getProjectsdMachines() {
        return projectsdMachines;
    }

    public void setProjectsdMachines(List<MachineDTO> projectsdMachines) {
        this.projectsdMachines = projectsdMachines;
    }

    public List<ProjectFileDTO> getProjectsFiles() {
        return projectsFiles;
    }

    public void setProjectsFiles(List<ProjectFileDTO> projectsFiles) {
        this.projectsFiles = projectsFiles;
    }
}
